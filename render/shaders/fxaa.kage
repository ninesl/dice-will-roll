//go:build ignore

//kage:unit pixels

package shaders

// FXAA - a simple implementation

// To be used as a post-processing effect.
// It takes the rendered scene as its source image (imageSrc0).

// A magic number for luminance calculation
// const luminance_vector = vec3(0.299, 0.587, 0.114)

// Returns the luminance of a color
func luminance(c vec4) float {
    return dot(c.rgb, vec3(0.299, 0.587, 0.114))
}

func Fragment(dstPos vec4, srcPos vec2, color vec4) vec4 {
    // Get the inverse of the screen size, which is the size of one pixel
    pixel := 1.0 / imageDstSize()

    // Sample the luminance of the center pixel and its neighbors
    l := luminance(imageSrc0UnsafeAt(srcPos))
    l_north := luminance(imageSrc0UnsafeAt(srcPos + vec2(0, -pixel.y)))
    l_south := luminance(imageSrc0UnsafeAt(srcPos + vec2(0, pixel.y)))
    l_east := luminance(imageSrc0UnsafeAt(srcPos + vec2(pixel.x, 0)))
    l_west := luminance(imageSrc0UnsafeAt(srcPos + vec2(-pixel.x, 0)))

    // Find the min and max luminance around the current pixel
    l_min := min(l, min(min(l_north, l_south), min(l_east, l_west)))
    l_max := max(l, max(max(l_north, l_south), max(l_east, l_west)))

    // If the contrast is too low, it's not an edge, so just return the original color.
    // The 0.03 is a threshold to prevent blurring flat areas.
    if l_max - l_min < 0.03 {
        return imageSrc0UnsafeAt(srcPos)
    }
    
    // It's an edge, so we need to blur it.
    // We sample four diagonal neighbors.
    c_north_east := imageSrc0UnsafeAt(srcPos + vec2(pixel.x, -pixel.y))
    c_north_west := imageSrc0UnsafeAt(srcPos + vec2(-pixel.x, -pixel.y))
    c_south_east := imageSrc0UnsafeAt(srcPos + vec2(pixel.x, pixel.y))
    c_south_west := imageSrc0UnsafeAt(srcPos + vec2(-pixel.x, pixel.y))
    
    // Average the diagonal neighbors with the center pixel.
    // This is a simple blur that targets the jagged edges.
    center_color := imageSrc0UnsafeAt(srcPos)
    final_color := (center_color * 2.0 + c_north_east + c_north_west + c_south_east + c_south_west) / 6.0

    return final_color
}