//kage:unit pixels
package main

// Checkerboard
// func Fragment(targetCoords vec4, sourceCoords vec2, color vec4) vec4 {
// 	const CellSize = 16
// 	cellCoords := floor(targetCoords/CellSize)
// 	if mod(cellCoords.x + cellCoords.y, 2) == 0 {
// 		return vec4(0, 0, 1, 1) // magenta
// 	} else {
// 		return vec4(0, 0, 0, 1) // black
// 	}
// 



// 1 Minute Clock
// var Center vec2 // technically this isn't necessary, will explain later
// var Time float 

// func Fragment(targetCoords vec4, _ vec2, _ vec4) vec4 {
// 	const MarkerDistance = 160
// 	const Pi = 3.14159265

// 	// compute the position for the seconds marker
// 	secAngle := (mod(Time, 60)/60)*2*Pi
// 	secPos   := Center + vec2(sin(secAngle)*MarkerDistance, -cos(secAngle)*MarkerDistance)

// 	// return the sum of contributions for the two dots in the screen
// 	centerMarker := vec4(1)*inDotMask(targetCoords.xy, Center, 2, 1.5)
// 	secondMarker := vec4(1)*inDotMask(targetCoords.xy, secPos, 2, 1.5)
// 	return centerMarker + secondMarker
// }

// // Returns 1 if the current position is within 'hardRadius' of 'target',
// // between 1 and 0 if within 'hardRadius + softRadius', zero otherwise.
// func inDotMask(current vec2, target vec2, hardRadius, softRadius float) float {
// 	return 1.0 - smoothstep(hardRadius, hardRadius + softRadius, distance(current, target))
// }

