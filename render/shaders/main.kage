// DICE WILL ROLL
/*
logic
	types
		die
		handrank

render
*/
package main

import (
	_ "embed"
	"time"

	"github.com/hajimehoshi/ebiten/v2"
)

//go:embed shader.kage
var shaderProgram []byte

func main() {
	// compile the shader
	shader, err := ebiten.NewShader(shaderProgram)
	if err != nil {
		panic(err)
	}

	// create game struct
	game := &Game{shader: shader, startTime: time.Now()}

	// configure window and run game
	ebiten.SetWindowTitle("kage/load-and-invoke")
	ebiten.SetWindowSize(512, 512)
	err = ebiten.RunGame(game)
	if err != nil {
		panic(err)
	}
}

// Struct implementing the ebiten.Game interface.
// Reusing the vertices and options is advisable.
type Game struct {
	shader     *ebiten.Shader
	vertices   [4]ebiten.Vertex
	shaderOpts ebiten.DrawTrianglesShaderOptions
	startTime  time.Time
}

func (self *Game) Update() error { return nil }

func (self *Game) Layout(_, _ int) (int, int) {
	return 512, 512 // fixed layout
}

// Core drawing function from where we call DrawTrianglesShader.
func (self *Game) Draw(screen *ebiten.Image) {
	// map the vertices to the target image
	bounds := screen.Bounds()
	self.vertices[0].DstX = float32(bounds.Min.X) // top-left
	self.vertices[0].DstY = float32(bounds.Min.Y) // top-left
	self.vertices[1].DstX = float32(bounds.Max.X) // top-right
	self.vertices[1].DstY = float32(bounds.Min.Y) // top-right
	self.vertices[2].DstX = float32(bounds.Min.X) // bottom-left
	self.vertices[2].DstY = float32(bounds.Max.Y) // bottom-left
	self.vertices[3].DstX = float32(bounds.Max.X) // bottom-right
	self.vertices[3].DstY = float32(bounds.Max.Y) // bottom-right

	// NOTE: here we will also map the vertices to
	//       the source image in later examples.

	// triangle shader options
	if self.shaderOpts.Uniforms == nil {
		// initialize uniforms if necessary
		self.shaderOpts.Uniforms = make(map[string]any, 2)
		self.shaderOpts.Uniforms["Center"] = []float32{
			float32(screen.Bounds().Dx()) / 2,
			float32(screen.Bounds().Dy()) / 2,
		} // this will be passed as a vec2

		// link images if necessary (omit if nil)
		self.shaderOpts.Images[0] = nil
		self.shaderOpts.Images[1] = nil
		self.shaderOpts.Images[2] = nil
		self.shaderOpts.Images[3] = nil
	}

	// additional uniforms
	seconds := float32(time.Now().Sub(self.startTime).Seconds())
	self.shaderOpts.Uniforms["Time"] = seconds

	// draw shader
	indices := []uint16{0, 1, 2, 2, 1, 3} // map vertices to triangles
	screen.DrawTrianglesShader(self.vertices[:], indices, self.shader, &self.shaderOpts)
}
